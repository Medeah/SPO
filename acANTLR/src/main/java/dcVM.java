import java.io.StreamTokenizer;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

// VM/interpreter for running non standard dc code. Only made to work with code generated by this compiler
public class dcVM {
    private static String prog = "5\nsa\n0 k\nla\n5 k\n3.2\n+\nsb\n0 k\nlb\np\nsi";
    //private static String prog = "5 2.9 + p";
    private static Deque<BigDecimal> stack = new ArrayDeque<BigDecimal>();
    private static List<BigDecimal> registers = new ArrayList<BigDecimal>(26);
    private static MathContext mc = new MathContext(1);

    public static void main(String[] args) throws Exception {
        for (int i = 0; i < 26; i++) {
            registers.add(null);
        }
        StreamTokenizer tokenizer = new StreamTokenizer(new StringReader(prog));

        while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {
            switch (tokenizer.ttype) {
                case StreamTokenizer.TT_WORD:
                    String word = tokenizer.sval;
                    char opcode = word.charAt(0);
                    int reg;
                    switch (opcode) {
                        case 's':
                            reg = word.charAt(1) - 'a';
                            registers.set(reg, stack.pop());
                            break;
                        case 'l':
                            reg = word.charAt(1) - 'a';
                            stack.push(registers.get(reg));
                            break;
                        case 'p':
                            System.out.print(stack.peek());
                            break;
                        case 'k':
                            mc = new MathContext(stack.pop().intValue() + 1);
                            break;
                        default:
                            System.err.println("Unknown opcode: " + tokenizer);
                    }
                    break;
                case StreamTokenizer.TT_NUMBER:
                    stack.push(new BigDecimal(tokenizer.nval));
                    break;
                case '+':
                    stack.push(stack.pop().add(stack.pop(), mc));
                    break;
                case '-':
                    stack.push(stack.pop().subtract(stack.pop(), mc));
                    break;
                default:
                    System.err.println("Unknown token: " + tokenizer);
            }
        }
    }
}
